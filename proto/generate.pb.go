// Code generated by protoc-gen-go. DO NOT EDIT.
// source: generate.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	generate.proto

It has these top-level messages:
	ShutdownRequest
	ShutdownReply
	UUIDRequest
	UUIDReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ShutdownRequest struct {
}

func (m *ShutdownRequest) Reset()                    { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string            { return proto1.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()               {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ShutdownReply struct {
}

func (m *ShutdownReply) Reset()                    { *m = ShutdownReply{} }
func (m *ShutdownReply) String() string            { return proto1.CompactTextString(m) }
func (*ShutdownReply) ProtoMessage()               {}
func (*ShutdownReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UUIDRequest struct {
}

func (m *UUIDRequest) Reset()                    { *m = UUIDRequest{} }
func (m *UUIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*UUIDRequest) ProtoMessage()               {}
func (*UUIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UUIDReply struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *UUIDReply) Reset()                    { *m = UUIDReply{} }
func (m *UUIDReply) String() string            { return proto1.CompactTextString(m) }
func (*UUIDReply) ProtoMessage()               {}
func (*UUIDReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UUIDReply) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func init() {
	proto1.RegisterType((*ShutdownRequest)(nil), "proto.ShutdownRequest")
	proto1.RegisterType((*ShutdownReply)(nil), "proto.ShutdownReply")
	proto1.RegisterType((*UUIDRequest)(nil), "proto.UUIDRequest")
	proto1.RegisterType((*UUIDReply)(nil), "proto.UUIDReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Generator service

type GeneratorClient interface {
	GenerateUUID(ctx context.Context, in *UUIDRequest, opts ...grpc.CallOption) (*UUIDReply, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownReply, error)
}

type generatorClient struct {
	cc *grpc.ClientConn
}

func NewGeneratorClient(cc *grpc.ClientConn) GeneratorClient {
	return &generatorClient{cc}
}

func (c *generatorClient) GenerateUUID(ctx context.Context, in *UUIDRequest, opts ...grpc.CallOption) (*UUIDReply, error) {
	out := new(UUIDReply)
	err := grpc.Invoke(ctx, "/proto.Generator/GenerateUUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownReply, error) {
	out := new(ShutdownReply)
	err := grpc.Invoke(ctx, "/proto.Generator/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Generator service

type GeneratorServer interface {
	GenerateUUID(context.Context, *UUIDRequest) (*UUIDReply, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownReply, error)
}

func RegisterGeneratorServer(s *grpc.Server, srv GeneratorServer) {
	s.RegisterService(&_Generator_serviceDesc, srv)
}

func _Generator_GenerateUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServer).GenerateUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Generator/GenerateUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServer).GenerateUUID(ctx, req.(*UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generator_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Generator/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Generator",
	HandlerType: (*GeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateUUID",
			Handler:    _Generator_GenerateUUID_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Generator_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generate.proto",
}

func init() { proto1.RegisterFile("generate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4f, 0xcd, 0x4b,
	0x2d, 0x4a, 0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x82,
	0x5c, 0xfc, 0xc1, 0x19, 0xa5, 0x25, 0x29, 0xf9, 0xe5, 0x79, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x4a, 0xfc, 0x5c, 0xbc, 0x08, 0xa1, 0x82, 0x9c, 0x4a, 0x25, 0x5e, 0x2e, 0xee, 0xd0, 0x50,
	0x4f, 0x17, 0x98, 0xbc, 0x3c, 0x17, 0x27, 0x84, 0x5b, 0x90, 0x53, 0x29, 0x24, 0xc4, 0xc5, 0x52,
	0x5a, 0x9a, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66, 0x1b, 0xd5, 0x73, 0x71,
	0xba, 0x43, 0x2c, 0xcb, 0x2f, 0x12, 0x32, 0xe3, 0xe2, 0x81, 0x72, 0x52, 0x41, 0xba, 0x84, 0x84,
	0x20, 0xf6, 0xeb, 0x21, 0x99, 0x28, 0x25, 0x80, 0x22, 0x06, 0xb2, 0x92, 0x41, 0xc8, 0x8a, 0x8b,
	0x03, 0xe6, 0x0a, 0x21, 0x31, 0xa8, 0x3c, 0x9a, 0x4b, 0xa5, 0x44, 0x30, 0xc4, 0xc1, 0x7a, 0x93,
	0xd8, 0xc0, 0xc2, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x51, 0xae, 0x5a, 0xf4, 0x00,
	0x00, 0x00,
}
